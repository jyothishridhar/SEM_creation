<<<<<<< HEAD
"""Typing tests for `_core._ufunc_config`."""
=======
<<<<<<< HEAD
"""Typing tests for `_core._ufunc_config`."""
=======
"""Typing tests for `core._ufunc_config`."""
>>>>>>> 7ef3263bf8ad3edda12247249d99ea6f271604bd
>>>>>>> f381b97f3c4908d545a6261474c75f6902f79357

import sys
from typing import Any, Protocol
from collections.abc import Callable

import numpy as np
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
from numpy.core._ufunc_config import _ErrDict
>>>>>>> 7ef3263bf8ad3edda12247249d99ea6f271604bd
>>>>>>> f381b97f3c4908d545a6261474c75f6902f79357

if sys.version_info >= (3, 11):
    from typing import assert_type
else:
    from typing_extensions import assert_type

def func(a: str, b: int) -> None: ...

<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
class FuncProtocol(Protocol):
    def __call__(self, a: str, b: int) -> None: ...

>>>>>>> 7ef3263bf8ad3edda12247249d99ea6f271604bd
>>>>>>> f381b97f3c4908d545a6261474c75f6902f79357
class Write:
    def write(self, value: str) -> None: ...

class SupportsWrite(Protocol):
    def write(self, s: str, /) -> object: ...

<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> f381b97f3c4908d545a6261474c75f6902f79357
assert_type(np.seterr(all=None), np._core._ufunc_config._ErrDict)
assert_type(np.seterr(divide="ignore"), np._core._ufunc_config._ErrDict)
assert_type(np.seterr(over="warn"), np._core._ufunc_config._ErrDict)
assert_type(np.seterr(under="call"), np._core._ufunc_config._ErrDict)
assert_type(np.seterr(invalid="raise"), np._core._ufunc_config._ErrDict)
assert_type(np.geterr(), np._core._ufunc_config._ErrDict)
<<<<<<< HEAD
=======
=======
assert_type(np.seterr(all=None), _ErrDict)
assert_type(np.seterr(divide="ignore"), _ErrDict)
assert_type(np.seterr(over="warn"), _ErrDict)
assert_type(np.seterr(under="call"), _ErrDict)
assert_type(np.seterr(invalid="raise"), _ErrDict)
assert_type(np.geterr(), _ErrDict)
>>>>>>> 7ef3263bf8ad3edda12247249d99ea6f271604bd
>>>>>>> f381b97f3c4908d545a6261474c75f6902f79357

assert_type(np.setbufsize(4096), int)
assert_type(np.getbufsize(), int)

assert_type(np.seterrcall(func), Callable[[str, int], Any] | None | SupportsWrite)
assert_type(np.seterrcall(Write()), Callable[[str, int], Any] | None | SupportsWrite)
assert_type(np.geterrcall(), Callable[[str, int], Any] | None | SupportsWrite)

<<<<<<< HEAD
assert_type(np.errstate(call=func, all="call"), np.errstate)
assert_type(np.errstate(call=Write(), divide="log", over="log"), np.errstate)
=======
<<<<<<< HEAD
assert_type(np.errstate(call=func, all="call"), np.errstate)
assert_type(np.errstate(call=Write(), divide="log", over="log"), np.errstate)
=======
assert_type(np.errstate(call=func, all="call"), np.errstate[FuncProtocol])
assert_type(np.errstate(call=Write(), divide="log", over="log"), np.errstate[Write])
>>>>>>> 7ef3263bf8ad3edda12247249d99ea6f271604bd
>>>>>>> f381b97f3c4908d545a6261474c75f6902f79357
